#include <iostream>
using namespace std;
class doublylinkedlist
{
	struct Node   // Џ—Ёд« ” —«я  ббджѕ 
	{
		int item; // ед« «бг џн— «ббн едЌЁў Ёне «бЏд’— 
		Node* next;// жѕ« »жнд — «бдня”  «ббн ен‘«ж— Џбн «ббн »Џѕе 
		Node* prev; // жѕ« »жнд — «б»—нЁ «ббн е ‘«ж— Џбн «бЏд’— «ббн ё»бе «Ќд« ед« Ён «бѕ»б ед‘«ж— Џбн «бЏд’— «ббн »Џѕд« ж«ббн ё»бд« 
	};
	Node* frist; // ѕ« »жнд — ен‘«ж— Џбн «жб Џд’— 
	Node* last; // ѕ« »жнд — ен‘«ж— Џбн «ќ— Џд’—
	int count;  // ѕ« Џ‘«д дЏ—Ё Џдѕд« я«г Џд’— 
public:
	// ед« Џгбд« яжд” —«я ж— Џ‘«д дѕн ёнге г»ѕ√не  
	doublylinkedlist()
	{
		frist = last = NULL; // ед« «бёнге «б«жбне 
		count = 0; // жед« ёнг… г»ѕ√не »—ѕя » 0 
	}
	// ѕ« гнЋжѕ дЏ—Ё «ббн”  Ё«÷не жб« б«
	bool isEmpty()
	{
		return (frist == NULL); // бж «бЁ—”  г»н‘«ж—‘ Џбн Ќ«ће  »ён Ё«÷не 
	}
	// ѕ« гнЋжѕ «б«÷«Ёе гд ёѕ«г
	void insertfrist(int element)
	{
		Node* newNode = new Node; // «жб Ќ«ће Џгбд« джѕ ћѕнѕ 
		newNode->item = element; // ед« «ѕнд« ёнг… «бЏд’— ббджѕ 
		if (count == 0) // ед«  ‘ня Џ‘«д бж «ббн”  я«д  Ё«÷не жѕ« «жб Џд’— ед÷нЁе
		{
			frist = last = newNode; // едќбн «бЁ—н”  ж«бб«”  н‘«ж—ж Џбн «бджѕ «бћѕнѕе Џ‘«д «жб Џд’—
			newNode->next = newNode->prev = NULL; // жЎ»Џ« б«д «бЏд’— б«“г н‘«ж— Џбн Ќ«ће ёѕ«ге жЌ«ће ж—«е жгЁн‘ џн—е н»ён г‘ ен‘«ж— Џбн Ќ«ће
		}
		else // ед« бж ед÷нЁ жЁн Џд«’— гжћжѕе

		{
			newNode->next = frist; //едќбн «бдня”  » «Џ «бджѕ «бћѕнѕе н‘«ж— Џбн «бЁ—” 
			newNode->prev = NULL; //ед« едќбн «б»—нЁ гн‘«ж—‘ Џбн Ќ«ће б«д »д÷нЁ гд ёѕ«г 
			frist->prev = newNode; // дќбн «бЏд’— «ббн я«д «бЁ—н”  «б»—нЁ » «Џ н —»Ў »«бджѕ «бћѕнѕе
			frist = newNode; // дќбн «бЁ—н”  н‘«ж— Џбн «бджѕ «бћѕнѕе
		}
		count++; // ед« “жѕд« «бг џн— » 1 Џ‘«д ÷Ёд« Џд’— ћѕнѕ
	}
	// гнЋжѕ «б«÷«Ёе гд «бќбЁ
	void insertlast(int element)
	{
		Node* newNode = new Node; // «жб Ќ«ће Џгбд« джѕ ћѕнѕ 
		newNode->item = element; // ед« «ѕнд« ёнг… «бЏд’— ббджѕ 
		if (count == 0) // ед«  ‘ня Џ‘«д бж «ббн”  я«д  Ё«÷не жѕ« «жб Џд’— ед÷нЁе
		{
			frist = last = newNode; // едќбн «бЁ—н”  ж«бб«”  н‘«ж—ж Џбн «бджѕ «бћѕнѕе Џ‘«д «жб Џд’—
			newNode->next = newNode->prev = NULL; // жЎ»Џ« б«д «бЏд’— б«“г н‘«ж— Џбн Ќ«ће ёѕ«ге жЌ«ће ж—«е жгЁн‘ џн—е н»ён г‘ ен‘«ж— Џбн Ќ«ће
		}
		else
		{
			newNode->next = NULL; // ед« «жб Ќ«ће Ў«бг« «ќ— Џд’— н»ён «бдя”  г‘ ен‘«ж— Џбн Ќ«ће
			newNode->prev = last;  // жЏ‘«д еж «ќ— Џд’— ж»д÷нЁ гд ж—« н»ён дќбн «б»—нЁ н‘«ж— Џбн «бб«”  «бёѕнге
			last->next = newNode; // ќб«’ ÷Ёд« «бЏд’— ж—»Ўд«е д—»Ў »ён «бЏд’— «бёѕнг «ббн я«д «б«ќн— »ѕ« » «д дќбн «бдя”  » «Џе н‘«ж— Џбн «бджѕ
			last = newNode; // дќбн «бб«”  н‘«ж— Џбн «бджѕ »ён 
		}
		count++; // ед« “жѕд« «бг џн— » 1 Џ‘«д ÷Ёд« Џд’— ћѕнѕ
	}
	// ѕ« гнЋжѕ «б«÷«Ёе Ён «бгя«д «ббн дќ «—е
	void insertAt(int pos, int element)
	{
		if (pos < 0 || pos > count) // «жб Ќ«ће ед ‘ня бж «бнж“— ѕќб гя«д џбЎ 
		{
			cout << "out of range";
		}
		else
		{
			Node* newNode = new Node; // ед« Џ—Ёд« джѕ ћѕнѕе
			newNode->item = element; // —»Ўд« «бЏд’— »«бджѕ «бћѕнѕе
			if (pos == 0) // ед« бж я«д «б»ж“н‘д =0 еж«жб гя«д
				insertfrist(element); //д” ѕЏн ѕ«б… «б«÷«Ёе гд «б«жб
			else if (pos == count) // ед« бж я«д «б»ж“н‘д = «ќ— Џд’—
				insertlast(element); // д ”ѕЏн ѕ«б… «б«÷«Ёе гд «бќбЁ
			else // ед« бж ед÷÷нЁ Ён гя«д Ён «бд’
			{
				Node* Cur = frist; // едЏ—Ё »жнд — ћѕнѕждќбне н”«жн «бенѕ 
				for (int i = 1; i < pos; i++) // едЏгб Ёж— бж» Џ‘«д дж’б ббгя«д «ббн ё»б «б»ж“н‘д
				{
					Cur = Cur->next; // едќбн «бг џн— ж«ёЁ Џбн «бгя«д «ббн ё»б «б»ж“н‘д «бгЌѕѕнде
				}
				// дЁ —÷ е÷днЁ 5 Ён «бгя«д 3
				newNode->next = Cur->next; // ед« —»Ўд« «бдня”  » «Џ «бджѕ «бћѕнѕе «ббн ен 5 »«бдя”  » «Џ «бя—д  «ббн еж »н‘«ж— Џбн 3
				newNode->prev = Cur; // ед« ќбнд« «б»—нЁ » «е «бджѕ «бћѕнѕе н‘«ж— Џбн «бя—д  «ббн ен Ён «бгя«д 2 ж»яѕ« н»ён «бджѕ «бћѕнѕе « ÷«Ё  Ён «бгя«д «б’Ќ »нд «б2 ж«б3 Ё»яѕ« ќѕ  гя«д «б3 ж«б 3 «—Ќб  »ё  Ён «б—«»Џ
				Cur->next->prev = newNode; // ед« »д—»Ў «б»—нЁ » «Џ «бгя«д —ёг 4 »«бгя«д 3
				Cur->next = newNode; // жед« »д—»Ў «бдня”  » «Џ «бгя«д —ёг 2 »«бгя«д —ёг 
				count++; // ед« “жѕд« «бг џн— » 1 Џ‘«д ÷Ёд« Џд’— ћѕнѕ
			}
		}
	}
	// ѕ«бе «бЌ–Ё гд «б»ѕ«не 
	void removefrist()
	{
		if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		{
			cout << " list is empty";
		}
		else if (count == 1) // ед« бж Ёне« Џд’— ж«Ќѕ 
		{
			delete frist; // едг”Ќ «бЁ—”  Џ‘«д еж «ббн »н‘«ж— Џбн «бЏд’— ѕ«
			frist = last = NULL; // »Џѕнд дѕн ёнге ббЁ—”   «дн
		}
		else
		{
			Node* cur = frist; // ед« едЏгб »жнд — ћѕнѕ н”«жн «бенѕ
			frist = frist->next; // едќбн ёнг… «бЁ—”  н”«жн «бЏд’— «ббн »Џѕе
			frist->prev = NULL; // ед« едќбн «б»—нЁ » «Џ «бЁ—”  «жб Џд’— гн‘«ж—‘ Џбн Ќ«ће
			delete cur; // едг”Ќ «б»жнд — «ббн я«д »н‘«ж— Џбн ёнг… «бЁ—”  «бёѕнг
		}
		count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—

	}
	void removelast()
	{
		if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		{
			cout << "Linked list is empty";
		}
		else if (count == 1) // ед« бж Ёне« Џд’— ж«Ќѕ 
		{
			delete frist; // едг”Ќ «бЁ—”  Џ‘«д еж «ббн »н‘«ж— Џбн «бЏд’— ѕ«
			frist = last = NULL; // »Џѕнд дѕн ёнге «бЁ—”   «дн
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—

		}
		else // ед« бж Џдѕн «я — гд Џд’—
		{
			Node* cur = last; // Џ—Ёд« »жнд — н”«жн «бя—д  
			last = last->prev; // ед« »д—ћЏ «бб«”  ќЎже бж—« жн‘«ж— Џбн «бЏд’— «ббн ё»бе 
			last->next = NULL; // ед« »дќбн «бЁ—”  гн‘«ж—‘ Џбн Ќ«ће ждЁ’б «бЏд’— «б«ќн— бжЌѕе
			delete cur; // ед« едг”Ќ «б»жнд — «ббн я«д нн‘«ж— Џбн «бб«”  «бёѕнге
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—

		}
	}
	// гнЋжѕ Ќ–Ё Џд’— гЏнд
	void remove(int element)
	{
		if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		{
			cout << " list is empty";
		}
		if (frist->item == element) // ѕ« ””»н‘н«б ян” бж «бЏд’— «жб ж«Ќѕ 
		{
			removefrist();
		}
		else
		{
			Node* cur = frist->next; // «жб Ќ«ће едЏгб »жнд — н‘«ж— Џбн «бЏд’— «ббн »Џѕ «бЁ—” 
			while (cur != NULL) // Ўжб г« «бя—д  »н‘«ж— Џбн Џд’— «ббж» ‘џ«бе
			{
				if (cur->item == element) // ѕ«  ‘ня Џ‘«д бг« нб«ён «бЏд’— нжёЁ «ббж» 
					break;
				cur = cur->next;
			}
			if (cur == NULL) // ѕ« Ён Ќ«б… бж гбёнд«‘ «бЏд’—
			{
				cout << "the element is not here";
			}
			else if (cur->next == NULL) // ѕ« Ён Ќ«б… бж  б«ёнд« «бЏд’— жЎбЏ «б«ќн—
			{
				removelast();
			}
			else
			{
				// ед« »д—»Ў «бЏд’—нд «ббн ё»б ж»Џѕ «бЏд’— «ббн ен Ќ–Ё
				cur->prev->next = cur->next; 
				cur->next->prev = cur->prev;
				delete cur; // ед« едг”Ќ «б»жнд —     
				count--;

			}
		}
	}
	// ѕ« гнЋжѕ «бЎ»«Џе 
	void print()
	{
		Node* cur = frist;// едЏ—Ё »жнд — ћѕнѕ н‘«ж— Џбн «бЁ—”  жедЏгб »не бж» дбЁ Џбн Џд«’— «ббндяѕ бн” 
		cout << "{";
		while (cur != NULL) // бж «бг џн— ѕ« »н‘«ж— Џбн Џд’—
		{
			cout << cur->item << " "; // «Ў»Џ «бг џн—
			cur = cur->next; // “жѕ ёнг… «бг џн— »«бг џн— «ббн »Џѕе
		}
		cout << "}";
		cout << endl;
	}
	void reverse()
	{
		Node* cur = last;// едЏ—Ё »жнд — ћѕнѕ н‘«ж— Џбн «бб«”  жедЏгб »не бж» дбЁ Џбн Џд«’— «ббндяѕ бн” 
		cout << "{";
		while (cur != NULL) // бж «бг џн— ѕ« »н‘«ж— Џбн Џд’—
		{
			cout << cur->item << " "; // «Ў»Џ «бг џн—
			cur = cur->prev; // “жѕ ёнг… «бг џн— »«бг џн— «ббн ё»бе
		}
		cout << "}";
		cout << endl;
	}

};
int main()
{
	doublylinkedlist dl;
	dl.insertAt(0, 10);
	dl.insertAt(1, 20);
	dl.insertAt(2, 30);
	dl.insertAt(3, 40);
	dl.print();
	dl.reverse();
}

