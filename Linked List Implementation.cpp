#include <iostream>
using namespace std;
class Linkedlist // «жб Ќ«ће Џгбд« яб«” «ббндяѕ бн”  
{
	struct Node   // Џ—Ёд« ” —«я  ббджѕ 
	{
		int item; // ед« «бг џн— «ббн едЌЁў Ёне «бЏд’— 
		Node* next; // жѕ« »жнд — «бдня”  «ббн ен‘«ж— Џбн «ббн »Џѕе 
	};
	Node* head; // ѕ« »жнд — ен‘«ж— Џбн «жб Џд’— 
	Node* tail; // ѕ« »жнд — ен‘«ж— Џбн «ќ— Џд’—
	int count;  // ѕ« Џ‘«д дЏ—Ё Џдѕд« я«г Џд’— 
public:
	// ед« Џгбд« яжд” —«я ж— Џ‘«д дѕн ёнге г»ѕ√не  
	Linkedlist()
	{
		head = tail = NULL; // ед« «бёнге «б«жбне 
		count = 0; // жед« ёнг… г»ѕ√не »—ѕя » 0 
	}
	// ѕ« «жб гнЋжѕ ен ‘я «ббндяѕ бн”  Ё«÷не жб« б«
	bool isEmpty()
	{
		return count == 0; // бж ёнг… «бг џн— ѕ« » 0 н»ён Ё«÷не 
	}
	// ѕ« гнЋжѕ «Џ—Ё Ќћг «ббндяѕ бн”  «ѕ «н 
	int getsize()
	{
		return count; // ед« ен—ћЏ ёнг… «бг џн— ѕ« Џ‘«д ѕ« «ббн »нЌ”» Џдѕд« я«г Џд’—
	}
	// ѕ« гнЋжѕ «б«÷«Ёе гд «б«жб 
	void insertfrist(int element)
	{
		Node*newnode= new Node; // «жб Ќ«ће Џгбд« джѕ ћѕнѕ 
		newnode->item = element; // ед« «ѕнд« ёнг… «бЏд’— ббджѕ 
		if (count == 0) // ед«  ‘ня Џ‘«д бж «ббндяѕ бн”  я«д  Ё«÷не жѕ« «жб Џд’— ед÷нЁе
		{
			head = tail = newnode; // н»ён «бджѕ ћѕнѕе е ‘«ж— Џбн «бенѕ ж«б нб Џ‘«д «жб Џд’—
			newnode->next = NULL; //
		}
		else // ед« бж ед÷нЁ жЁн Џд«’— гжћжѕе
		{
			newnode->next = head; // едќбн «бдня”  » «Џ «бджѕ «бћѕнѕе н‘«ж— Џбн «бенѕ
			head = newnode; // ж»Џѕе« дќбн «бенѕ = «бджѕ «бћѕнѕе н»ён яѕ« ÷Ёд« Ён «б«жб
		}
		count++; // ед« “жѕд« «бг џн— » 1 Џ‘«д ÷Ёд« Џд’— ћѕнѕ
	}
	// ѕ« гнЋжѕ «б«÷«Ё гд «б¬ќ—
	void insertlast(int element)
	{
		Node*newnode = new Node; // «жб Ќ«ће Џгбд« джѕ ћѕнѕ 
		newnode->item = element; // ед« «ѕнд« ёнг… «бЏд’— ббджѕ 
		if (count == 0) // ед«  ‘ня Џ‘«д бж «ббндяѕ бн”  я«д  Ё«÷не жѕ« «жб Џд’— ед÷нЁе
		{
			head = tail = newnode; // н»ён «бджѕ ћѕнѕе е ‘«ж— Џбн «бенѕ ж«б нб Џ‘«д «жб Џд’—
			newnode->next = NULL; //
		}
		else //ед« бж ед÷нЁ жЁн Џд«’— гжћжѕе
		{
			tail->next = newnode; //ед« едќбн «бдня”  » «Џ «б нб н‘«ж— Џбн «бджѕ «бћѕнѕе
			newnode->next = NULL; // Џ‘«д еж «ќ— Џд’— едќбн «бдня”  н‘«ж— Џбн Ё—«џ
			tail = newnode; // ж»Џѕе« дќбн «б нб = «бджѕ «бћѕнѕе н»ён яѕ« ÷Ёд« Ён «б«жб
		}
		count++; // ед« “жѕд« «бг џн— » 1 Џ‘«д ÷Ёд« Џд’— ћѕнѕ
	}
	//ѕ« гнЋжѕ «б«÷«Ёе Ён гя«д гЏнд
	void insertatpos(int pos, int element)
	{
		if (pos<0 || pos>count) // «жб Ќ«ће ед ‘ня бж «бнж“— ѕќб гя«д џбЎ 
		{
			cout << "out of range";
		}
		else
		{
			Node*newnode=new Node; // ед« Џ—Ёд« джѕ ћѕнѕе
			newnode->item = element; // —»Ўд« «бЏд’— »«бджѕ «бћѕнѕе
			if (pos == 0) // ед« бж я«д «б»ж“н‘д =0 еж«жб гя«д
				insertfrist(element); //д” ѕЏн ѕ«б… «б«÷«Ёе гд «б«жб
			else if (pos == count) // ед« бж я«д «б»ж“н‘д = «ќ— Џд’—
				insertlast(element); // д ”ѕЏн ѕ«б… «б«÷«Ёе гд «бќбЁ
			else // ед« бж ед÷÷нЁ Ён гя«д Ён «бд’
			{
				Node* Cur = head; // едЏ—Ё »жнд — ћѕнѕждќбне н”«жн «бенѕ 
				for (size_t i = 1; i < pos; i++) // едЏгб Ёж— бж» Џ‘«д дж’б ббгя«д «ббн ё»б «б»ж“н‘д
				{
					Cur = Cur->next; // едќбн «бг џн— ж«ёЁ Џбн «бгя«д «ббн ё»б «б»ж“н‘д «бгЌѕѕнде
				}
				newnode->next = Cur->next; // ед« —»Ўд« «бдня”  » «Џ «бджѕ «ббн е ‘«жн Џбн 3 »«бдя”  » «Џ «бя—д  «ббн еж 3 жн»ён яѕ« ÷Ёд« «бджѕ 
				Cur->next = newnode; // ед« ед—»Ў дЁ —÷ ед÷нЁ Ён «бгя«д 3 яѕ« ед—»Ў «бгя«д 2 »«бджѕ «бћѕнѕе «ббн е  ÷«Ё гя«д 3
			}
		}
	}
	// ѕ« гнЋжѕ «бЎ»«Џе 
	void print()
	{
		Node* cur = head; // едЏ—Ё »жнд — ћѕнѕ н‘«ж— Џбн «бенѕ жедЏгб »не бж» дбЁ Џбн Џд«’— «ббндяѕ бн” 
		while (cur != NULL) // бж «бг џн— ѕ« »н‘«ж— Џбн Џд’—
		{
			cout << cur->item << " "; // «Ў»Џ «бг џн—
			cur = cur->next; // “жѕ ёнг… «бг џн— »«бг џн— «ббн »Џѕе
		}
		cout << endl;
	}
	// ѕ«бе «бЌ–Ё гд «б»ѕ«не 
	void removefrist()
	{
		if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		{
			cout << "Linked list is empty";
		}
		else if (count == 1) // ед« бж Ёне« Џд’— ж«Ќѕ 
		{
			delete head; // едг”Ќ «бенѕ Џ‘«д еж «ббн »н‘«ж— Џбн «бЏд’— ѕ«
			head = tail = NULL; // »Џѕнд дѕн ёнге ббенѕ  «дн
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—
		}
		else // ед« бж Џдѕн «я — гд Џд’—
		{
			Node* cur = head; // ед« едЏгб »жнд — ћѕнѕ н”«жн «бенѕ
			head = head->next; // едќбн ёнг… «бенѕ н”«жн «бЏд’— «ббн »Џѕе
			delete cur; // едг”Ќ «б»жнд — «ббн я«д »н‘«ж— Џбн ёнг… «бенѕ «бёѕнг
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—
		}
	}
	void removelast()
	{
		if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		{
			cout << "Linked list is empty";
		}
		else if (count == 1) // ед« бж Ёне« Џд’— ж«Ќѕ 
		{
			delete head; // едг”Ќ «бенѕ Џ‘«д еж «ббн »н‘«ж— Џбн «бЏд’— ѕ«
			head = tail = NULL; // »Џѕнд дѕн ёнге ббенѕ  «дн
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—
		}
		else // ед« бж Џдѕн «я — гд Џд’—
		{
			Node* cur = head->next; // едЏгб »жнд — ен‘«ж— Џбн «бЏд’— «ббн »Џѕ «бенѕ
			Node* prv = head; // ж»жнд —н‘«ж— Џбн «бенѕ
			while (cur != tail) // Ўжб г« «бя—д  гн”«жн‘ «ќ— Џд’—
			{
				prv = cur; // ”«жн «б»—нЁнж” »ёнг… «бя—д  «бёѕнге 
				cur = cur->next; // «ѕн ёнг… ћѕнѕе ббя—д  «бЏд’— «ббн »Џѕе
			}
			delete cur; // ед« едг”Ќ «бя—д  Џ‘«д ќб«’ »ён »н”«жн «ќ— Џд’—
			prv->next = NULL; // яѕ« «б»—нЁнж” »ён нЏ »— «ќ— Џд’— Ёедќбне н‘«ж— Џбн Ё—«џ
			tail = prv; // едќбн «б нб н‘«ж— Џбн «б»—нЁ
			count--; // едёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—
		}
	}
		// гнЋжѕ Ќ–Ё Џд’— гЏнд
	void remove(int element)
	{
		    if (isEmpty()) // д ‘ня «б«жб «ббндяѕ бн”  Ё«÷не жб« б« 
		 	{
				cout << "Linked list is empty";
			}
			Node *cur, *prv; // ед« едЏ—Ё « днд »жнд — ед‘ џб »нег 
			if (head->item == element) // ѕ« ”»н‘н«б ян” бж я«д «бЏд’— еж «жб ж«Ќѕ
			{
				cur = head; // ед”«жн «бенѕ »«бя—д 
				head = head->next; // дќбн «бенѕ н‘«ж— Џбн «ббн »Џѕе 
				delete cur;  // дг”Ќ «бя—д  
				count--;  // дёбб ёнг… «бг џн— «ббн »нЌ”» Џдѕн я«г Џд’—
				if (count == 0) // бж ЎбЏ »Џѕ г« ёббд« ёгн… «бг џн— ЎбЏ » ’Ё— н»ён гяд‘ Џдѕн џн— Џд’— ж«Ќѕ
				{
					tail = NULL; // н»ён дќбн «б нб гн”«жн‘ Ќ«ће
				}
			}
			else // ед« бж «бЏд’— Ён гя«д  «дн 
			{
				cur = head->next; // едќбн «бя—д  н‘«ж— Џбн «бЏд’— «ббн »Џѕ «бенѕ
				prv = head; // едќбн «б—нЁ н‘«ж— Џбн «бенѕ
				while (cur != NULL) // Ўжб г« «бя—д  »н”«жн Џд’— «ббж» ‘џ«бе
				{
					if (cur->item == element) // ѕ« Џ‘«д бж б«ёнд« «бЏд’— дЏгб »—ня жджёЁ бж»
						break;
					prv = cur; // »дќбн «б»—нЁ н”«жн «бя—д  
					cur = cur->next; // ждќбн «бя—д  н—жЌ ббЏд’— «ббн »Џѕе Џ‘«д няжд ”«»ё «б»—нЁ »Џд’—

				}
				if (cur == NULL) // бг« «ббж»  ќб’ Џдѕн Ќ«б нд бж ЎбЏ г»н”«жн‘ Ќ«ће “н ѕн 
				{
					cout << "The element Not found";
				}
				else // «ж б«ёнд« «бЏд’— 
				{
					prv->next = cur->next; // едќбн «бдня”  » «Џ «б»—нЁ н‘«ж— Џбн «бдня”  » «Џ «бя—д  «‘гЏд« «бдня”  г‘ «бя—д  б«д «бя—д  ѕ« «бЏд’— «ббн едЌ–е ж«Ќд« ед‘«ж— Џбн «ббн »Џѕе 
					if (cur == tail) // Ў» Ён Ќ«бе бж «бя—д  «ќ— Џд’— 
					tail=prv; // ќбн «б нб н”«жн «б»—нЁ 
					delete cur; // «г”Ќ «бя—д  
					count--; // ёбб ёнг… «бг џн— » 1 
				}
			}
	}
   // ѕ« гнЋжѕ Џя” «бЏд«’—
	void reverse()
	{
	  Node* cur, *prv ,*next; // «жб Ќ«ће Џ—Ёд« 3 »жнд — ед‘ џб »нег 
      prv = NULL; // едќбн «б»—нЁ гн‘«ж—‘ Џбн Ќ«ће 
	  cur = head; // ж«бя—д  н‘«ж— Џбн «бенѕ
	  next = cur->next; // ж«бдя”   н‘«ж— Џбн «бЏд’— «ббн »Џѕ «бя—д 
		while (next != NULL) // Ўжб г« «бдя”  »н‘«ж— Џбн Џд’— «бЁж— бж» ‘џ«бе
		{
		next = cur->next; // едќбн «бдня”  н‘«ж— “н г« ёбд« Џбн «бЏд’— «ббн »Џѕ «бя—д 
		cur->next = prv; // ж«бя—д  «бдя”  » «Џе ен‘«ж— Џбн «б»—нЁнж” жед« Џгбд« Џгбн… ёЎЏ ббджѕ »»Џ÷е« ж»дЏя”ег
		prv = cur; 
		cur = next;
		}
		head = prv; // ед« бг« «бЁж— бж»  ќб’ «б»—нЁнж” еняжд ж«ёЁ Џбн «ќ— Џд’— Ёедќбне еж «бенѕ 
	}
	// гнЋжѕ «б»ЌЋ Џд Џд’— 
	int search(int element)
	{
		Node* cur=head;
		int pos = 0;
		while (cur != NULL)
		{
			if (cur->item == element)
				return pos;
			cur = cur->next;
				pos++;
     	}
		return -1;
	}
};
int main()
 {
	Linkedlist l1;
	l1.insertfrist(50);
	l1.insertatpos(1, 10);
	l1.insertatpos(2, 20);
	l1.insertatpos(3, 30);
	l1.insertatpos(4, 40);
	l1.print();
	cout << l1.search(40);
 }